// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stream.proto

package stream

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Metric struct {
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Metric               int64                `protobuf:"varint,2,opt,name=metric,proto3" json:"metric,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Metric) Reset()         { *m = Metric{} }
func (m *Metric) String() string { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()    {}
func (*Metric) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_e98cbf203ce1fb09, []int{0}
}
func (m *Metric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metric.Unmarshal(m, b)
}
func (m *Metric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metric.Marshal(b, m, deterministic)
}
func (dst *Metric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metric.Merge(dst, src)
}
func (m *Metric) XXX_Size() int {
	return xxx_messageInfo_Metric.Size(m)
}
func (m *Metric) XXX_DiscardUnknown() {
	xxx_messageInfo_Metric.DiscardUnknown(m)
}

var xxx_messageInfo_Metric proto.InternalMessageInfo

func (m *Metric) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Metric) GetMetric() int64 {
	if m != nil {
		return m.Metric
	}
	return 0
}

type Average struct {
	Val                  float64  `protobuf:"fixed64,1,opt,name=val,proto3" json:"val,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Average) Reset()         { *m = Average{} }
func (m *Average) String() string { return proto.CompactTextString(m) }
func (*Average) ProtoMessage()    {}
func (*Average) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_e98cbf203ce1fb09, []int{1}
}
func (m *Average) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Average.Unmarshal(m, b)
}
func (m *Average) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Average.Marshal(b, m, deterministic)
}
func (dst *Average) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Average.Merge(dst, src)
}
func (m *Average) XXX_Size() int {
	return xxx_messageInfo_Average.Size(m)
}
func (m *Average) XXX_DiscardUnknown() {
	xxx_messageInfo_Average.DiscardUnknown(m)
}

var xxx_messageInfo_Average proto.InternalMessageInfo

func (m *Average) GetVal() float64 {
	if m != nil {
		return m.Val
	}
	return 0
}

func init() {
	proto.RegisterType((*Metric)(nil), "stream.Metric")
	proto.RegisterType((*Average)(nil), "stream.Average")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MetricsServiceClient is the client API for MetricsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MetricsServiceClient interface {
	Collect(ctx context.Context, opts ...grpc.CallOption) (MetricsService_CollectClient, error)
}

type metricsServiceClient struct {
	cc *grpc.ClientConn
}

func NewMetricsServiceClient(cc *grpc.ClientConn) MetricsServiceClient {
	return &metricsServiceClient{cc}
}

func (c *metricsServiceClient) Collect(ctx context.Context, opts ...grpc.CallOption) (MetricsService_CollectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MetricsService_serviceDesc.Streams[0], "/stream.MetricsService/collect", opts...)
	if err != nil {
		return nil, err
	}
	x := &metricsServiceCollectClient{stream}
	return x, nil
}

type MetricsService_CollectClient interface {
	Send(*Metric) error
	CloseAndRecv() (*Average, error)
	grpc.ClientStream
}

type metricsServiceCollectClient struct {
	grpc.ClientStream
}

func (x *metricsServiceCollectClient) Send(m *Metric) error {
	return x.ClientStream.SendMsg(m)
}

func (x *metricsServiceCollectClient) CloseAndRecv() (*Average, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Average)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MetricsServiceServer is the server API for MetricsService service.
type MetricsServiceServer interface {
	Collect(MetricsService_CollectServer) error
}

func RegisterMetricsServiceServer(s *grpc.Server, srv MetricsServiceServer) {
	s.RegisterService(&_MetricsService_serviceDesc, srv)
}

func _MetricsService_Collect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MetricsServiceServer).Collect(&metricsServiceCollectServer{stream})
}

type MetricsService_CollectServer interface {
	SendAndClose(*Average) error
	Recv() (*Metric, error)
	grpc.ServerStream
}

type metricsServiceCollectServer struct {
	grpc.ServerStream
}

func (x *metricsServiceCollectServer) SendAndClose(m *Average) error {
	return x.ServerStream.SendMsg(m)
}

func (x *metricsServiceCollectServer) Recv() (*Metric, error) {
	m := new(Metric)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MetricsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stream.MetricsService",
	HandlerType: (*MetricsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "collect",
			Handler:       _MetricsService_Collect_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "stream.proto",
}

func init() { proto.RegisterFile("stream.proto", fileDescriptor_stream_e98cbf203ce1fb09) }

var fileDescriptor_stream_e98cbf203ce1fb09 = []byte{
	// 190 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x2e, 0x29, 0x4a,
	0x4d, 0xcc, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0xa4, 0xe4, 0xd3, 0xf3,
	0xf3, 0xd3, 0x73, 0x52, 0xf5, 0xc1, 0xa2, 0x49, 0xa5, 0x69, 0xfa, 0x25, 0x99, 0xb9, 0xa9, 0xc5,
	0x25, 0x89, 0xb9, 0x05, 0x10, 0x85, 0x4a, 0x51, 0x5c, 0x6c, 0xbe, 0xa9, 0x25, 0x45, 0x99, 0xc9,
	0x42, 0x16, 0x5c, 0x9c, 0x70, 0x49, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x6e, 0x23, 0x29, 0x3d, 0x88,
	0x76, 0x3d, 0x98, 0x76, 0xbd, 0x10, 0x98, 0x8a, 0x20, 0x84, 0x62, 0x21, 0x31, 0x2e, 0xb6, 0x5c,
	0xb0, 0x19, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0xcc, 0x41, 0x50, 0x9e, 0x92, 0x34, 0x17, 0xbb, 0x63,
	0x59, 0x6a, 0x51, 0x62, 0x7a, 0xaa, 0x90, 0x00, 0x17, 0x73, 0x59, 0x62, 0x0e, 0xd8, 0x58, 0xc6,
	0x20, 0x10, 0xd3, 0xc8, 0x8e, 0x8b, 0x0f, 0x62, 0x71, 0x71, 0x70, 0x6a, 0x51, 0x59, 0x66, 0x72,
	0xaa, 0x90, 0x0e, 0x17, 0x7b, 0x72, 0x7e, 0x4e, 0x4e, 0x6a, 0x72, 0x89, 0x10, 0x9f, 0x1e, 0xd4,
	0x37, 0x10, 0x25, 0x52, 0xfc, 0x30, 0x3e, 0xd4, 0x3c, 0x0d, 0xc6, 0x24, 0x36, 0xb0, 0x9b, 0x8c,
	0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe7, 0x9e, 0x32, 0x62, 0xf8, 0x00, 0x00, 0x00,
}
